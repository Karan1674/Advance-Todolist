<!-- Modal toggle -->
<button
  data-modal-target="default-modal"
  id="toggleBtn"
  data-modal-toggle="default-modal"
  class="hidden block text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
  type="button"
>
  Toggle modal
</button>

<!-- Main modal -->
<div
  id="default-modal"
  tabindex="-1"
  aria-hidden="true"
  class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full"
>
  <div class="relative p-4 w-full max-w-2xl max-h-full">
    <!-- Modal content -->
    <div class="relative bg-white rounded-lg shadow-sm dark:bg-gray-700">
      <!-- Modal header -->
      <div
        class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600 border-gray-200"
      >
        <div class="flex w-full justify-center gap-4">
          <button
            id="showMediaData"
            class="px-3 py-2 w-1/2 text-lg font-semibold bg-gray-300 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500"
          >
            Media Image
          </button>
          <button
            id="showUrlData"
            class="px-3 py-2 w-1/2 text-lg font-semibold bg-gray-300 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500"
          >
            URL
          </button>
        </div>
        <!-- <button
          type="button"
          class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"
          data-modal-hide="default-modal"
        >
          <svg
            class="w-3 h-3"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 14 14"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"
            />
          </svg>
          <span class="sr-only">Close modal</span>
        </button> -->
      </div>
      <!-- Modal body -->
      <div class="p-4 md:p-5 space-y-4">
        <div class="flex searchDiv justify-center flex-row gap-2">
          <input
            type="text"
            class="border text-black bg-white rounded-md border border-gray-400 basis-[88%] p-2"
            placeholder="Search The Media With its Tag"
            id="searchInput"
          />
          <button
            class="bg-green-500 basis-[10%] rounded-md text-white"
            onclick="window.location.href='/medialibrary'"
          >
            Add
          </button>
        </div>

        <div
          class="showMedia flex flex-wrap items-center justify-between flex-row gap-2 m-8"
        >
          <% if(media) { %> <% media.medialibrary.forEach((item,index)=>{ %>
         <div
      class="mediaDataCard h-[150px] w-[150px] relative cursor-pointer"
      data-tags="<%= item.tag %>"
      onclick="handleImage('<%= item.url %>', this)"
    >
      <img
        src="../../<%= item.url %>"
        class="object-cover h-full w-full"
        alt=""
      />
      <div class="absolute inset-0 bg-black opacity-20 h-full"></div>
    </div>
          <% }) %> <% } else{ %>
          <p class="w-full text-center text-white">No Media Data To Show</p>
          <% } %>
        </div>

        <div class="showurl hidden flex justify-center flex-col w-full">
          <input
            id="urlInput"
            type="text"
            name="url"
         
            placeholder="Enter URL"
            class="w-full p-2 border border-gray-300 text-black bg-white rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"
          />
        </div>

        <div class="pagination flex items-center justify-center gap-8 my-4">
          <button class="prebtn text-black p-2 rounded-md bg-white">
            Previous
          </button>
          <div class="pages text-black p-2 rounded-md bg-white"></div>
          <button class="nextbtn text-black p-2 rounded-md bg-white">
            Next
          </button>
        </div>
      </div>

      <!-- Modal footer -->
      <div
        class="flex items-center justify-end p-4 md:p-5 border-t border-gray-200 rounded-b dark:border-gray-600"
      >
        <button
          data-modal-hide="default-modal"
          type="button"
          onclick="handleDiscriptionImage()"
          class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
        >
          Upload
        </button>
        <button
          data-modal-hide="default-modal"
          type="button"
          class="py-2.5 px-5 ms-3 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
        >
          Decline
        </button>
      </div>
    </div>
  </div>
</div>

<script>

      const editor = new Jodit("#editor", {
      height: 400,
      toolbarAdaptive: false,
      uploader: {
        insertImageAsBase64URI: true,
      },
      buttons: ["bold", "italic", "underline", "|", "ul", "ol", "imageData"],
      controls: {
        imageData: {
          name: "imageData",
          iconURL: "../../public/assets/Picture_icon_BLACK.svg",

          exec: (editor) => {
            const toggleBtn = document.querySelector("#toggleBtn");
            toggleBtn.click();
          },
        },
      },
    });
  const searchInput = document.getElementById("searchInput");


  searchInput.addEventListener("input", function () {
    const value = this.value.toLowerCase();
    const mediaDataCard = document.querySelectorAll(".mediaDataCard");
    mediaDataCard.forEach((card) => {
      let allTags = card.dataset.tags.split(",");
      allTags = allTags.map((tag) => tag.trim().toLowerCase());
      const isMatch = allTags.some((tag) => tag.includes(value));
      card.style.display = isMatch ? "block" : "none";
    });
  });

  const showMedia = document.querySelector(".showMedia");
  const showMediaData = document.querySelector("#showMediaData");
  const showUrlData = document.querySelector("#showUrlData");
  const showurl = document.querySelector(".showurl");

  showMediaData.addEventListener("click", () => {
    showMedia.classList.remove("hidden");
    showurl.classList.add("hidden");
    document.querySelector(".pagination").classList.remove("hidden");
    document.querySelector(".searchDiv").classList.remove("hidden");
  });

  showUrlData.addEventListener("click", () => {
    showMedia.classList.add("hidden");
    showurl.classList.remove("hidden");
    document.querySelector(".pagination").classList.add("hidden");
    document.querySelector(".searchDiv").classList.add("hidden");
  });

  const cards = document.querySelectorAll(".mediaDataCard");
  const items = 3;
  const pageNumber = Math.ceil(cards.length / items);
  let currentPage = 1;
  const nextbtn = document.querySelector(".nextbtn");
  const prebtn = document.querySelector(".prebtn");

  const showcard = () => {
    cards.forEach((card, index) => {
      const start = (currentPage - 1) * items;
      const end = currentPage * items;
      card.style.display = index >= start && index < end ? "flex" : "none";
    });
  };

  nextbtn.addEventListener("click", () => {
    if (currentPage < pageNumber) {
      prebtn.disabled = false;
      currentPage++;
      buttonShow();
      showcard();
    } else {
      nextbtn.disabled = true;
    }
  });

  prebtn.addEventListener("click", () => {
    if (currentPage > 1) {
      nextbtn.disabled = false;
      currentPage--;
      buttonShow();
      showcard();
    } else {
      prebtn.disabled = true;
    }
  });

  const pages = document.querySelector(".pages");
  const buttonShow = () => {
    pages.innerHTML = "";
    pages.innerHTML = `${currentPage} of ${pageNumber}`;
  };
  showcard();
  buttonShow();

  let imageUrl = "";
  let lastSelected = null;

    const urlInput = document.getElementById("urlInput");
  urlInput.addEventListener("change", (e) => imageUrl=e.target.value);

  const handleImage = (url,element) => {

      imageUrl = "/"+url;
      if (lastSelected) {
      lastSelected.classList.remove('border-4', 'border-blue-500', 'shadow-lg');
    }

    element.classList.add('border-4', 'border-blue-500', 'shadow-lg');

    lastSelected = element;

    console.log('Selected image URL:', url);

  };

  const handleDiscriptionImage = () => {
    if (imageUrl) {
      editor.s.insertImage(imageUrl, null, 200);
      imageUrl = "";
      
    } else {
      console.error("No image URL selected");
    }
  };



</script>

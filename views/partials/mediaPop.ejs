
<!-- Modal toggle -->
<button
  data-modal-target="default-modal"
  id="toggleBtn"
  data-modal-toggle="default-modal"
  class="hidden text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center transition"
  type="button"
>
  Toggle modal
</button>

<!-- Main modal -->
<div
  id="default-modal"
  tabindex="-1"
  aria-hidden="true"
  class="hidden fixed inset-0 z-50 flex justify-center items-center w-full h-full bg-black bg-opacity-50 transition-opacity duration-300"
>
  <div class="relative p-4 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
    <!-- Modal content -->
    <div class="relative bg-white rounded-xl shadow-lg dark:bg-gray-800">
      <!-- Modal header -->
      <div class="flex items-center justify-between p-5 border-b border-gray-200 dark:border-gray-700">
        <div class="flex w-full justify-center gap-4">
          <button
            id="showMediaData"
            class="w-1/2 py-2.5 px-4 text-sm font-semibold text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
          >
            Media Image
          </button>
          <button
            id="showUrlData"
            class="w-1/2 py-2.5 px-4 text-sm font-semibold text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
          >
            URL
          </button>
        </div>
        <button
          type="button"
          data-modal-hide="default-modal"
          class="text-gray-400 hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"
        >
          <svg
            class="w-4 h-4"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 14 14"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"
            />
          </svg>
          <span class="sr-only">Close modal</span>
        </button>
      </div>
      <!-- Modal body -->
      <div class="p-5 space-y-4">
        <div class="searchDiv flex items-center gap-3">
          <input
            type="text"
            id="searchInput"
            placeholder="Search media by tag..."
            class="flex-grow p-3 text-sm text-gray-700 bg-white border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
          />
          <button
            class="bg-green-600 text-white px-4 py-2.5 rounded-lg hover:bg-green-700 focus:ring-2 focus:ring-green-500 transition"
            onclick="window.location.href='/medialibrary'"
          >
            <i class="fa-solid fa-plus"></i> Add
          </button>
        </div>

        <div class="showMedia flex flex-wrap gap-4 justify-center">
          <% if(media) { %>
            <% media.medialibrary.forEach((item, index) => { %>
              <div
                class="mediaDataCard relative h-32 w-32 cursor-pointer rounded-lg overflow-hidden transition-transform hover:scale-105"
                data-tags="<%= item.tag %>"
                onclick="handleImage('<%= item.url %>', this)"
              >
                <img
                  src="../../<%= item.url %>"
                  class="object-cover h-full w-full"
                  alt="Media item"
                />
                <div class="absolute inset-0 bg-black opacity-0 hover:opacity-20 transition-opacity"></div>
              </div>
            <% }) %>
          <% } else { %>
            <p class="w-full text-center text-gray-500 dark:text-gray-400">No media available</p>
          <% } %>
        </div>

        <div class="showurl hidden flex flex-col gap-3">
          <input
            id="urlInput"
            type="text"
            name="url"
            placeholder="Enter image URL..."
            class="w-full p-3 text-sm text-gray-700 bg-white border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
          />
        </div>

        <div class="pagination flex items-center justify-center gap-4">
          <button class="prebtn px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 disabled:opacity-50 transition">
            Previous
          </button>
          <span class="pages px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-lg"></span>
          <button class="nextbtn px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 disabled:opacity-50 transition">
            Next
          </button>
        </div>
      </div>

      <!-- Modal footer -->
      <div class="flex items-center justify-end p-5 border-t border-gray-200 dark:border-gray-700 gap-3">
        <button
          data-modal-hide="default-modal"
          type="button"
          onclick="handleDiscriptionImage()"
          class="bg-blue-600 text-white px-5 py-2.5 rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 transition"
        >
          Upload
        </button>
        <button
          data-modal-hide="default-modal"
          type="button"
          class="bg-white text-gray-700 px-5 py-2.5 border border-gray-200 rounded-lg hover:bg-gray-100 focus:ring-2 focus:ring-gray-100 transition"
        >
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  const editor = new Jodit("#editor", {
    height: 400,
    toolbarAdaptive: false,
    uploader: {
      insertImageAsBase64URI: true,
    },
    buttons: ["bold", "italic", "underline", "|", "ul", "ol", "imageData"],
    controls: {
      imageData: {
        name: "imageData",
        iconURL: "../../public/assets/Picture_icon_BLACK.svg",
        exec: (editor) => {
          const toggleBtn = document.querySelector("#toggleBtn");
          toggleBtn.click();
        },
      },
    },
  });

  const searchInput = document.getElementById("searchInput");
  searchInput.addEventListener("input", function () {
    const value = this.value.toLowerCase();
    const mediaDataCard = document.querySelectorAll(".mediaDataCard");
    mediaDataCard.forEach((card) => {
      let allTags = card.dataset.tags.split(",");
      allTags = allTags.map((tag) => tag.trim().toLowerCase());
      const isMatch = allTags.some((tag) => tag.includes(value));
      card.style.display = isMatch ? "block" : "none";
    });
  });

  const showMedia = document.querySelector(".showMedia");
  const showMediaData = document.querySelector("#showMediaData");
  const showUrlData = document.querySelector("#showUrlData");
  const showurl = document.querySelector(".showurl");

  showMediaData.addEventListener("click", () => {
    showMedia.classList.remove("hidden");
    showurl.classList.add("hidden");
    document.querySelector(".pagination").classList.remove("hidden");
    document.querySelector(".searchDiv").classList.remove("hidden");
    showMediaData.classList.add("bg-blue-100", "text-blue-700");
    showUrlData.classList.remove("bg-blue-100", "text-blue-700");
  });

  showUrlData.addEventListener("click", () => {
    showMedia.classList.add("hidden");
    showurl.classList.remove("hidden");
    document.querySelector(".pagination").classList.add("hidden");
    document.querySelector(".searchDiv").classList.add("hidden");
    showUrlData.classList.add("bg-blue-100", "text-blue-700");
    showMediaData.classList.remove("bg-blue-100", "text-blue-700");
  });

  const cards = document.querySelectorAll(".mediaDataCard");
  const items = 6; // Increased for better layout
  const pageNumber = Math.ceil(cards.length / items);
  let currentPage = 1;
  const nextbtn = document.querySelector(".nextbtn");
  const prebtn = document.querySelector(".prebtn");

  const showcard = () => {
    cards.forEach((card, index) => {
      const start = (currentPage - 1) * items;
      const end = currentPage * items;
      card.style.display = index >= start && index < end ? "block" : "none";
    });
  };

  nextbtn.addEventListener("click", () => {
    if (currentPage < pageNumber) {
      prebtn.disabled = false;
      currentPage++;
      buttonShow();
      showcard();
    }
    nextbtn.disabled = currentPage === pageNumber;
  });

  prebtn.addEventListener("click", () => {
    if (currentPage > 1) {
      nextbtn.disabled = false;
      currentPage--;
      buttonShow();
      showcard();
    }
    prebtn.disabled = currentPage === 1;
  });

  const pages = document.querySelector(".pages");
  const buttonShow = () => {
    pages.innerHTML = `${currentPage} / ${pageNumber}`;
  };
  showcard();
  buttonShow();

  let imageUrl = "";
  let lastSelected = null;

  const urlInput = document.getElementById("urlInput");
  urlInput.addEventListener("change", (e) => (imageUrl = e.target.value));

  const handleImage = (url, element) => {
    imageUrl = "/" + url;
    if (lastSelected) {
      lastSelected.classList.remove("border-4", "border-blue-500", "shadow-lg");
    }
    element.classList.add("border-4", "border-blue-500", "shadow-lg");
    lastSelected = element;
  };

  const handleDiscriptionImage = () => {
    if (imageUrl) {
      editor.s.insertImage(imageUrl, null, 200);
      imageUrl = "";
      document.querySelector("#toggleBtn").click();
    } else {
      console.error("No image URL selected");
    }
  };

  // Modal open/close animation
  const modal = document.getElementById("default-modal");
  const toggleModal = () => {
    if (modal.classList.contains("hidden")) {
      modal.classList.remove("hidden");
      modal.classList.add("opacity-0");
      setTimeout(() => modal.classList.remove("opacity-0"), 10);
    } else {
      modal.classList.add("opacity-0");
      setTimeout(() => modal.classList.add("hidden"), 300);
    }
  };
  document.querySelector("#toggleBtn").addEventListener("click", toggleModal);
  document.querySelectorAll("[data-modal-hide='default-modal']").forEach((btn) => {
    btn.addEventListener("click", toggleModal);
  });
</script>
<style>
  #default-modal:not(.hidden) {
    opacity: 1;
    transition: opacity 0.3s ease-in-out;
  }
  #default-modal.hidden {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }
</style>
